(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* ==========================================================================
   Helpers.js - JS Shims, helpers

   Consider using one of these libraries to provide support for
   javascript's natives across browsers

   * https://github.com/kriskowal/es5-shim
   * http://lodash.com/
   * http://sugarjs.com/
   ========================================================================== */

/*
   Array Remove
   By John Resig (MIT Licensed)
   http://ejohn.org/blog/javascript-array-remove/
   ========================================================================== */
Array.prototype.remove = Array.prototype.remove || function (from, to) {
	var rest = this.slice((to || from) + 1 || this.length);
	this.length = from < 0 ? this.length + from : from;
	return this.push.apply(this, rest);
};

/*
   String substitute, ported from MooTools
   Usage: https://gist.github.com/mrmartineau/7926397
   ========================================================================== */
String.prototype.substitute = function (object) {
	return this.replace(/\{(.+?)\}/g, function (match, name) {
		return name in object ? object[name] : match;
	});
};

/*
   Array forEach patch
   ========================================================================== */
if (!('forEach' in Array.prototype)) {
	Array.prototype.forEach = function (fn, scope) {
		for (var i = 0, len = this.length; i < len; ++i) {
			fn.call(scope, this[i], i, this);
		}
	};
}

/*
   Array filter patch
   ========================================================================== */
if (!('filter' in Array.prototype)) {
	Array.prototype.filter = function (fn, scope) {
		var results = [];
		for (var value, i = 0, l = this.length >>> 0; i < l; i++) {
			if (i in this) {
				value = this[i];
				if (fn.call(scope, value, i, this)) {
					results.push(value);
				}
			}
		}
		return results;
	};
}

/*
   Array map patch
   ========================================================================== */
if (!('map' in Array.prototype)) {
	Array.prototype.map = function (fn, scope) {
		var length = this.length >>> 0, results = Array(length);
		for (var i = 0; i < length; i++) {
			if (i in this) {
				results[i] = fn.call(scope, this[i], i, this);
			}
		}
		return results;
	};
}

/*
   Object create patch
   ========================================================================== */
if (!('create' in Object.prototype)) {
	Object.create = (function () {
		function F() { }

		return function (o) {
			if (arguments.length != 1) {
				throw new Error('Object.create implementation only accepts one parameter.');
			}
			F.prototype = o;
			return new F();
		};
	})();
}

/*
   Object comparison is not the same as if you compare primitive types.
   https://gist.github.com/nicbell/6081098
   ========================================================================== */
Object.compare = function (obj1, obj2) {
	for (var p in obj1) {
		if ( obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
			return false;
		}

		switch (typeof (obj1[p])) {
			case 'object':
				if (!Object.compare(obj1[p], obj2[p])) {
					return false;
				}
				break;
			case 'function':
				if (typeof (obj2[p]) == 'undefined' || (p != 'compare' && obj1[p].toString() != obj2[p].toString())) {
					return false;
				}
				break;
			default:
				if (obj1[p] != obj2[p]) {
					return false;
				}
		}
	}

	for (var p in obj2) {
		if (typeof (obj1[p]) == 'undefined') {
			return false;
		}
	}
	return true;
};

/*
   Function bind patch
   ========================================================================== */
if (!('bind' in Function.prototype)) {
	Function.prototype.bind = function (oThis) {
		if (typeof this !== "function") {
			// closest thing possible to the ECMAScript 5 internal IsCallable function
			throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
		}

		var aArgs = Array.prototype.slice.call(arguments, 1),
			fToBind = this,
			fNOP = function () { },
			fBound = function () {
				return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
			};

		fNOP.prototype = this.prototype;
		fBound.prototype = new fNOP();

		return fBound;
	};
}

},{}],2:[function(require,module,exports){
/* ==========================================================================
   Log.js - Lightweight wrapper for console.log

   Usage: log('inside coolFunc', this, arguments);
   * paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
   ========================================================================== */
window.log = function f() {
	log.history = log.history || [];
	log.history.push(arguments);
	if (this.console) {
		var args = arguments,
			newarr;
		try {
			args.callee = f.caller;
		} catch (e) {}
		newarr = [].slice.call(args);
		if (typeof console.log === 'object')  {
			log.apply.call(console.log, console, newarr);
		} else {
			console.log.apply(console, newarr);
		}
	}
};

},{}],3:[function(require,module,exports){
/*
	UI.js

	Example module to show how to include other JS files into you browserify build
*/

// dependencies for this module go here
// e.g. var $ = require('traversty')

module.exports = {
	init : function () {
		console.debug('KO.UI module is being initialised');
	}
}
},{}],4:[function(require,module,exports){
/*	Author:
		TMW - (Author Name Here)
*/

// --------------------------------------------- //
// DEFINE GLOBAL LIBS                            //
// --------------------------------------------- //
// Uncomment the line below to expose jQuery as a global object to the usual places
// window.jQuery = window.$ = require('./libs/jquery/jquery-1.10.2.js');

// force compilation of global libs that don't return a value.
require("./helpers/log");
require("./helpers/helpers");

//initialise KO object
var KO = {};

KO.Config = {
	variableX : '', // please don't keep me - only for example syntax!

	init : function () {
		console.debug('Kickoff is running');

		// Example module include
		KO.UI = require('./modules/UI');
		KO.UI.init();
	}
};



KO.Config.init();
},{"./helpers/helpers":1,"./helpers/log":2,"./modules/UI":3}]},{},[4])
//# sourceMappingURL=data:application/json;base64,
