(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* ==========================================================================
   Log.js - Lightweight wrapper for console.log

   Usage: log('inside coolFunc', this, arguments);
   * paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
   ========================================================================== */
window.log = function f() {
	log.history = log.history || [];
	log.history.push(arguments);
	if (this.console) {
		var args = arguments,
			newarr;
		try {
			args.callee = f.caller;
		} catch (e) {}
		newarr = [].slice.call(args);
		if (typeof console.log === 'object')  {
			log.apply.call(console.log, console, newarr);
		} else {
			console.log.apply(console, newarr);
		}
	}
};

},{}],2:[function(require,module,exports){
/*! 
Included shims: Array.forEach,Array.filter,Array.map,Function.bind,EventListener
*/

/*
    Array.prototype.forEach()
*/
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function(t, e) {
        var n, r;
        if (this == null) {
            throw new TypeError(" this is null or not defined");
        }
        // 1. Let O be the result of calling ToObject passing the |this| value as the argument.
        var i = Object(this);
        // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
        // 3. Let len be ToUint32(lenValue).
        var o = i.length >>> 0;
        // 4. If IsCallable(callback) is false, throw a TypeError exception.
        // See: http://es5.github.com/#x9.11
        if (typeof t !== "function") {
            throw new TypeError(t + " is not a function");
        }
        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (e) {
            n = e;
        }
        // 6. Let k be 0
        r = 0;
        // 7. Repeat, while k < len
        while (r < o) {
            var a;
            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            if (r in i) {
                // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
                a = i[r];
                // ii. Call the Call internal method of callback with T as the this value and
                // argument list containing kValue, k, and O.
                t.call(n, a, r, i);
            }
            // d. Increase k by 1.
            r++;
        }
    };
}

/*
    Array.prototype.filter()
*/
if (!Array.prototype.filter) {
    Array.prototype.filter = function(t) {
        "use strict";
        if (this === void 0 || this === null) throw new TypeError();
        var e = Object(this);
        var n = e.length >>> 0;
        if (typeof t !== "function") throw new TypeError();
        var r = [];
        var i = arguments.length >= 2 ? arguments[1] : void 0;
        for (var o = 0; o < n; o++) {
            if (o in e) {
                var a = e[o];
                // NOTE: Technically this should Object.defineProperty at
                //       the next index, as push can be affected by
                //       properties on Object.prototype and Array.prototype.
                //       But that method's new, and collisions should be
                //       rare, so use the more-compatible alternative.
                if (t.call(i, a, o, e)) r.push(a);
            }
        }
        return r;
    };
}

/*
   Array map patch
   ========================================================================== */
if (!("map" in Array.prototype)) {
    Array.prototype.map = function(t, e) {
        var n = this.length >>> 0, r = Array(n);
        for (var i = 0; i < n; i++) {
            if (i in this) {
                r[i] = t.call(e, this[i], i, this);
            }
        }
        return r;
    };
}

/*
    Function.prototype.bind()
*/
if (!Function.prototype.bind) {
    Function.prototype.bind = function(t) {
        if (typeof this !== "function") {
            // closest thing possible to the ECMAScript 5
            // internal IsCallable function
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
        }
        var e = Array.prototype.slice.call(arguments, 1), n = this, r = function() {}, i = function() {
            return n.apply(this instanceof r && t ? this : t, e.concat(Array.prototype.slice.call(arguments)));
        };
        r.prototype = this.prototype;
        i.prototype = new r();
        return i;
    };
}

// EventListener | MIT/GPL2 | https://github.com/jonathantneal/EventListener
this.Element && Element.prototype.attachEvent && !Element.prototype.addEventListener && function() {
    function t(t, e) {
        Window.prototype[t] = HTMLDocument.prototype[t] = Element.prototype[t] = e;
    }
    // add
    t("addEventListener", function(t, e) {
        var n = this, r = n.addEventListener.listeners = n.addEventListener.listeners || {}, i = r[t] = r[t] || [];
        // if no events exist, attach the listener
        if (!i.length) {
            n.attachEvent("on" + t, i.event = function(t) {
                var e = n.document && n.document.documentElement || n.documentElement || {
                    scrollLeft: 0,
                    scrollTop: 0
                };
                // polyfill w3c properties and methods
                t.currentTarget = n;
                t.pageX = t.clientX + e.scrollLeft;
                t.pageY = t.clientY + e.scrollTop;
                t.preventDefault = function() {
                    t.returnValue = false;
                };
                t.relatedTarget = t.fromElement || null;
                t.stopImmediatePropagation = function() {
                    l = false;
                    t.cancelBubble = true;
                };
                t.stopPropagation = function() {
                    t.cancelBubble = true;
                };
                t.target = t.srcElement || n;
                t.timeStamp = +new Date();
                // create an cached list of the master events list (to protect this loop from breaking when an event is removed)
                for (var r = 0, o = [].concat(i), a, l = true; l && (a = o[r]); ++r) {
                    // check to see if the cached event still exists in the master events list
                    for (var c = 0, s; s = i[c]; ++c) {
                        if (s == a) {
                            s.call(n, t);
                            break;
                        }
                    }
                }
            });
        }
        // add the event to the master event list
        i.push(e);
    });
    // remove
    t("removeEventListener", function(t, e) {
        var n = this, r = n.addEventListener.listeners = n.addEventListener.listeners || {}, i = r[t] = r[t] || [];
        // remove the newest matching event from the master event list
        for (var o = i.length - 1, a; a = i[o]; --o) {
            if (a == e) {
                i.splice(o, 1);
                break;
            }
        }
        // if no events exist, detach the listener
        if (!i.length && i.event) {
            n.detachEvent("on" + t, i.event);
        }
    });
    // dispatch
    t("dispatchEvent", function(t) {
        var e = this, n = t.type, r = e.addEventListener.listeners = e.addEventListener.listeners || {}, i = r[n] = r[n] || [];
        try {
            return e.fireEvent("on" + n, t);
        } catch (o) {
            if (i.event) {
                i.event(t);
            }
            return;
        }
    });
    // CustomEvent
    Object.defineProperty(Window.prototype, "CustomEvent", {
        get: function() {
            var t = this;
            return function e(n, r) {
                var i = t.document.createEventObject(), o;
                i.type = n;
                for (o in r) {
                    if (o == "cancelable") {
                        i.returnValue = !r.cancelable;
                    } else if (o == "bubbles") {
                        i.cancelBubble = !r.bubbles;
                    } else if (o == "detail") {
                        i.detail = r.detail;
                    }
                }
                return i;
            };
        }
    });
    // ready
    function e(t) {
        if (e.interval && document.body) {
            e.interval = clearInterval(e.interval);
            document.dispatchEvent(new CustomEvent("DOMContentLoaded"));
        }
    }
    e.interval = setInterval(e, 1);
    window.addEventListener("load", e);
}();

!this.CustomEvent && function() {
    // CustomEvent for browsers which don't natively support the Constructor method
    window.CustomEvent = function t(e, n) {
        var r;
        n = n || {
            bubbles: false,
            cancelable: false,
            detail: undefined
        };
        try {
            r = document.createEvent("CustomEvent");
            r.initCustomEvent(e, n.bubbles, n.cancelable, n.detail);
        } catch (i) {
            // for browsers which don't support CustomEvent at all, we use a regular event instead
            r = document.createEvent("Event");
            r.initEvent(e, n.bubbles, n.cancelable);
            r.detail = n.detail;
        }
        return r;
    };
}();
},{}],3:[function(require,module,exports){
/*
	UI.js

	Example module to show how to include other JS files into you browserify build
*/

// dependencies for this module go here
// e.g. var $ = require('traversty')

module.exports = {
	init : function () {
		console.debug('KO.UI module is being initialised');
	}
}
},{}],4:[function(require,module,exports){
/*	Author:
		TMW - (Author Name Here)
*/

// --------------------------------------------- //
// DEFINE GLOBAL LIBS                            //
// --------------------------------------------- //
// Uncomment the line below to expose jQuery as a global object to the usual places
// window.jQuery = window.$ = require('./libs/jquery/jquery-1.10.2.js');

// force compilation of global libs that don't return a value.
require("./helpers/log");
require("./helpers/shims");

//initialise KO object
var KO = {};

KO.Config = {
	variableX : '', // please don't keep me - only for example syntax!

	init : function () {
		console.debug('Kickoff is running');

		// Example module include
		KO.UI = require('./modules/UI');
		KO.UI.init();
	}
};


KO.Config.init();
},{"./helpers/log":1,"./helpers/shims":2,"./modules/UI":3}]},{},[4])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbm9sYW4xL19wcm9qZWN0cy9fc2V0dXAva2lja29mZi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiL1VzZXJzL2Fub2xhbjEvX3Byb2plY3RzL19zZXR1cC9raWNrb2ZmL2pzL2hlbHBlcnMvbG9nLmpzIiwiL1VzZXJzL2Fub2xhbjEvX3Byb2plY3RzL19zZXR1cC9raWNrb2ZmL2pzL2hlbHBlcnMvc2hpbXMuanMiLCIvVXNlcnMvYW5vbGFuMS9fcHJvamVjdHMvX3NldHVwL2tpY2tvZmYvanMvbW9kdWxlcy9VSS5qcyIsIi9Vc2Vycy9hbm9sYW4xL19wcm9qZWN0cy9fc2V0dXAva2lja29mZi9qcy9zY3JpcHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgTG9nLmpzIC0gTGlnaHR3ZWlnaHQgd3JhcHBlciBmb3IgY29uc29sZS5sb2dcblxuICAgVXNhZ2U6IGxvZygnaW5zaWRlIGNvb2xGdW5jJywgdGhpcywgYXJndW1lbnRzKTtcbiAgICogcGF1bGlyaXNoLmNvbS8yMDA5L2xvZy1hLWxpZ2h0d2VpZ2h0LXdyYXBwZXItZm9yLWNvbnNvbGVsb2cvXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xud2luZG93LmxvZyA9IGZ1bmN0aW9uIGYoKSB7XG5cdGxvZy5oaXN0b3J5ID0gbG9nLmhpc3RvcnkgfHwgW107XG5cdGxvZy5oaXN0b3J5LnB1c2goYXJndW1lbnRzKTtcblx0aWYgKHRoaXMuY29uc29sZSkge1xuXHRcdHZhciBhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0bmV3YXJyO1xuXHRcdHRyeSB7XG5cdFx0XHRhcmdzLmNhbGxlZSA9IGYuY2FsbGVyO1xuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0bmV3YXJyID0gW10uc2xpY2UuY2FsbChhcmdzKTtcblx0XHRpZiAodHlwZW9mIGNvbnNvbGUubG9nID09PSAnb2JqZWN0JykgIHtcblx0XHRcdGxvZy5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBuZXdhcnIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBuZXdhcnIpO1xuXHRcdH1cblx0fVxufTtcbiIsIi8qISBcbkluY2x1ZGVkIHNoaW1zOiBBcnJheS5mb3JFYWNoLEFycmF5LmZpbHRlcixBcnJheS5tYXAsRnVuY3Rpb24uYmluZCxFdmVudExpc3RlbmVyXG4qL1xuXG4vKlxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKClcbiovXG5pZiAoIUFycmF5LnByb3RvdHlwZS5mb3JFYWNoKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuLCByO1xuICAgICAgICBpZiAodGhpcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiIHRoaXMgaXMgbnVsbCBvciBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAxLiBMZXQgTyBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgVG9PYmplY3QgcGFzc2luZyB0aGUgfHRoaXN8IHZhbHVlIGFzIHRoZSBhcmd1bWVudC5cbiAgICAgICAgdmFyIGkgPSBPYmplY3QodGhpcyk7XG4gICAgICAgIC8vIDIuIExldCBsZW5WYWx1ZSBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIEdldCBpbnRlcm5hbCBtZXRob2Qgb2YgTyB3aXRoIHRoZSBhcmd1bWVudCBcImxlbmd0aFwiLlxuICAgICAgICAvLyAzLiBMZXQgbGVuIGJlIFRvVWludDMyKGxlblZhbHVlKS5cbiAgICAgICAgdmFyIG8gPSBpLmxlbmd0aCA+Pj4gMDtcbiAgICAgICAgLy8gNC4gSWYgSXNDYWxsYWJsZShjYWxsYmFjaykgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgLy8gU2VlOiBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3g5LjExXG4gICAgICAgIGlmICh0eXBlb2YgdCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHQgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyA1LiBJZiB0aGlzQXJnIHdhcyBzdXBwbGllZCwgbGV0IFQgYmUgdGhpc0FyZzsgZWxzZSBsZXQgVCBiZSB1bmRlZmluZWQuXG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBuID0gZTtcbiAgICAgICAgfVxuICAgICAgICAvLyA2LiBMZXQgayBiZSAwXG4gICAgICAgIHIgPSAwO1xuICAgICAgICAvLyA3LiBSZXBlYXQsIHdoaWxlIGsgPCBsZW5cbiAgICAgICAgd2hpbGUgKHIgPCBvKSB7XG4gICAgICAgICAgICB2YXIgYTtcbiAgICAgICAgICAgIC8vIGEuIExldCBQayBiZSBUb1N0cmluZyhrKS5cbiAgICAgICAgICAgIC8vICAgVGhpcyBpcyBpbXBsaWNpdCBmb3IgTEhTIG9wZXJhbmRzIG9mIHRoZSBpbiBvcGVyYXRvclxuICAgICAgICAgICAgLy8gYi4gTGV0IGtQcmVzZW50IGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgSGFzUHJvcGVydHkgaW50ZXJuYWwgbWV0aG9kIG9mIE8gd2l0aCBhcmd1bWVudCBQay5cbiAgICAgICAgICAgIC8vICAgVGhpcyBzdGVwIGNhbiBiZSBjb21iaW5lZCB3aXRoIGNcbiAgICAgICAgICAgIC8vIGMuIElmIGtQcmVzZW50IGlzIHRydWUsIHRoZW5cbiAgICAgICAgICAgIGlmIChyIGluIGkpIHtcbiAgICAgICAgICAgICAgICAvLyBpLiBMZXQga1ZhbHVlIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgR2V0IGludGVybmFsIG1ldGhvZCBvZiBPIHdpdGggYXJndW1lbnQgUGsuXG4gICAgICAgICAgICAgICAgYSA9IGlbcl07XG4gICAgICAgICAgICAgICAgLy8gaWkuIENhbGwgdGhlIENhbGwgaW50ZXJuYWwgbWV0aG9kIG9mIGNhbGxiYWNrIHdpdGggVCBhcyB0aGUgdGhpcyB2YWx1ZSBhbmRcbiAgICAgICAgICAgICAgICAvLyBhcmd1bWVudCBsaXN0IGNvbnRhaW5pbmcga1ZhbHVlLCBrLCBhbmQgTy5cbiAgICAgICAgICAgICAgICB0LmNhbGwobiwgYSwgciwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkLiBJbmNyZWFzZSBrIGJ5IDEuXG4gICAgICAgICAgICByKys7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKlxuICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoKVxuKi9cbmlmICghQXJyYXkucHJvdG90eXBlLmZpbHRlcikge1xuICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICBpZiAodGhpcyA9PT0gdm9pZCAwIHx8IHRoaXMgPT09IG51bGwpIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdmFyIGUgPSBPYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBuID0gZS5sZW5ndGggPj4+IDA7XG4gICAgICAgIGlmICh0eXBlb2YgdCAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIHZhciByID0gW107XG4gICAgICAgIHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyID8gYXJndW1lbnRzWzFdIDogdm9pZCAwO1xuICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IG47IG8rKykge1xuICAgICAgICAgICAgaWYgKG8gaW4gZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gZVtvXTtcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBUZWNobmljYWxseSB0aGlzIHNob3VsZCBPYmplY3QuZGVmaW5lUHJvcGVydHkgYXRcbiAgICAgICAgICAgICAgICAvLyAgICAgICB0aGUgbmV4dCBpbmRleCwgYXMgcHVzaCBjYW4gYmUgYWZmZWN0ZWQgYnlcbiAgICAgICAgICAgICAgICAvLyAgICAgICBwcm9wZXJ0aWVzIG9uIE9iamVjdC5wcm90b3R5cGUgYW5kIEFycmF5LnByb3RvdHlwZS5cbiAgICAgICAgICAgICAgICAvLyAgICAgICBCdXQgdGhhdCBtZXRob2QncyBuZXcsIGFuZCBjb2xsaXNpb25zIHNob3VsZCBiZVxuICAgICAgICAgICAgICAgIC8vICAgICAgIHJhcmUsIHNvIHVzZSB0aGUgbW9yZS1jb21wYXRpYmxlIGFsdGVybmF0aXZlLlxuICAgICAgICAgICAgICAgIGlmICh0LmNhbGwoaSwgYSwgbywgZSkpIHIucHVzaChhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xufVxuXG4vKlxuICAgQXJyYXkgbWFwIHBhdGNoXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuaWYgKCEoXCJtYXBcIiBpbiBBcnJheS5wcm90b3R5cGUpKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLmxlbmd0aCA+Pj4gMCwgciA9IEFycmF5KG4pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgaW4gdGhpcykge1xuICAgICAgICAgICAgICAgIHJbaV0gPSB0LmNhbGwoZSwgdGhpc1tpXSwgaSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbn1cblxuLypcbiAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCgpXG4qL1xuaWYgKCFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCkge1xuICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAgICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgLSB3aGF0IGlzIHRyeWluZyB0byBiZSBib3VuZCBpcyBub3QgY2FsbGFibGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCBuID0gdGhpcywgciA9IGZ1bmN0aW9uKCkge30sIGkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiByICYmIHQgPyB0aGlzIDogdCwgZS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgICB9O1xuICAgICAgICByLnByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuICAgICAgICBpLnByb3RvdHlwZSA9IG5ldyByKCk7XG4gICAgICAgIHJldHVybiBpO1xuICAgIH07XG59XG5cbi8vIEV2ZW50TGlzdGVuZXIgfCBNSVQvR1BMMiB8IGh0dHBzOi8vZ2l0aHViLmNvbS9qb25hdGhhbnRuZWFsL0V2ZW50TGlzdGVuZXJcbnRoaXMuRWxlbWVudCAmJiBFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hFdmVudCAmJiAhRWxlbWVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciAmJiBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KHQsIGUpIHtcbiAgICAgICAgV2luZG93LnByb3RvdHlwZVt0XSA9IEhUTUxEb2N1bWVudC5wcm90b3R5cGVbdF0gPSBFbGVtZW50LnByb3RvdHlwZVt0XSA9IGU7XG4gICAgfVxuICAgIC8vIGFkZFxuICAgIHQoXCJhZGRFdmVudExpc3RlbmVyXCIsIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG4gPSB0aGlzLCByID0gbi5hZGRFdmVudExpc3RlbmVyLmxpc3RlbmVycyA9IG4uYWRkRXZlbnRMaXN0ZW5lci5saXN0ZW5lcnMgfHwge30sIGkgPSByW3RdID0gclt0XSB8fCBbXTtcbiAgICAgICAgLy8gaWYgbm8gZXZlbnRzIGV4aXN0LCBhdHRhY2ggdGhlIGxpc3RlbmVyXG4gICAgICAgIGlmICghaS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG4uYXR0YWNoRXZlbnQoXCJvblwiICsgdCwgaS5ldmVudCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IG4uZG9jdW1lbnQgJiYgbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgbi5kb2N1bWVudEVsZW1lbnQgfHwge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxMZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIHBvbHlmaWxsIHczYyBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzXG4gICAgICAgICAgICAgICAgdC5jdXJyZW50VGFyZ2V0ID0gbjtcbiAgICAgICAgICAgICAgICB0LnBhZ2VYID0gdC5jbGllbnRYICsgZS5zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICAgIHQucGFnZVkgPSB0LmNsaWVudFkgKyBlLnNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICB0LnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHQucmVsYXRlZFRhcmdldCA9IHQuZnJvbUVsZW1lbnQgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICB0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHQudGFyZ2V0ID0gdC5zcmNFbGVtZW50IHx8IG47XG4gICAgICAgICAgICAgICAgdC50aW1lU3RhbXAgPSArbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYW4gY2FjaGVkIGxpc3Qgb2YgdGhlIG1hc3RlciBldmVudHMgbGlzdCAodG8gcHJvdGVjdCB0aGlzIGxvb3AgZnJvbSBicmVha2luZyB3aGVuIGFuIGV2ZW50IGlzIHJlbW92ZWQpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIG8gPSBbXS5jb25jYXQoaSksIGEsIGwgPSB0cnVlOyBsICYmIChhID0gb1tyXSk7ICsrcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayB0byBzZWUgaWYgdGhlIGNhY2hlZCBldmVudCBzdGlsbCBleGlzdHMgaW4gdGhlIG1hc3RlciBldmVudHMgbGlzdFxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMCwgczsgcyA9IGlbY107ICsrYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT0gYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY2FsbChuLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCB0aGUgZXZlbnQgdG8gdGhlIG1hc3RlciBldmVudCBsaXN0XG4gICAgICAgIGkucHVzaChlKTtcbiAgICB9KTtcbiAgICAvLyByZW1vdmVcbiAgICB0KFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IG4uYWRkRXZlbnRMaXN0ZW5lci5saXN0ZW5lcnMgPSBuLmFkZEV2ZW50TGlzdGVuZXIubGlzdGVuZXJzIHx8IHt9LCBpID0gclt0XSA9IHJbdF0gfHwgW107XG4gICAgICAgIC8vIHJlbW92ZSB0aGUgbmV3ZXN0IG1hdGNoaW5nIGV2ZW50IGZyb20gdGhlIG1hc3RlciBldmVudCBsaXN0XG4gICAgICAgIGZvciAodmFyIG8gPSBpLmxlbmd0aCAtIDEsIGE7IGEgPSBpW29dOyAtLW8pIHtcbiAgICAgICAgICAgIGlmIChhID09IGUpIHtcbiAgICAgICAgICAgICAgICBpLnNwbGljZShvLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBubyBldmVudHMgZXhpc3QsIGRldGFjaCB0aGUgbGlzdGVuZXJcbiAgICAgICAgaWYgKCFpLmxlbmd0aCAmJiBpLmV2ZW50KSB7XG4gICAgICAgICAgICBuLmRldGFjaEV2ZW50KFwib25cIiArIHQsIGkuZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gZGlzcGF0Y2hcbiAgICB0KFwiZGlzcGF0Y2hFdmVudFwiLCBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcywgbiA9IHQudHlwZSwgciA9IGUuYWRkRXZlbnRMaXN0ZW5lci5saXN0ZW5lcnMgPSBlLmFkZEV2ZW50TGlzdGVuZXIubGlzdGVuZXJzIHx8IHt9LCBpID0gcltuXSA9IHJbbl0gfHwgW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZS5maXJlRXZlbnQoXCJvblwiICsgbiwgdCk7XG4gICAgICAgIH0gY2F0Y2ggKG8pIHtcbiAgICAgICAgICAgIGlmIChpLmV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaS5ldmVudCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEN1c3RvbUV2ZW50XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdpbmRvdy5wcm90b3R5cGUsIFwiQ3VzdG9tRXZlbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGUobiwgcikge1xuICAgICAgICAgICAgICAgIHZhciBpID0gdC5kb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpLCBvO1xuICAgICAgICAgICAgICAgIGkudHlwZSA9IG47XG4gICAgICAgICAgICAgICAgZm9yIChvIGluIHIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8gPT0gXCJjYW5jZWxhYmxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkucmV0dXJuVmFsdWUgPSAhci5jYW5jZWxhYmxlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG8gPT0gXCJidWJibGVzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuY2FuY2VsQnViYmxlID0gIXIuYnViYmxlcztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvID09IFwiZGV0YWlsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuZGV0YWlsID0gci5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gcmVhZHlcbiAgICBmdW5jdGlvbiBlKHQpIHtcbiAgICAgICAgaWYgKGUuaW50ZXJ2YWwgJiYgZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgZS5pbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoZS5pbnRlcnZhbCk7XG4gICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcIkRPTUNvbnRlbnRMb2FkZWRcIikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGUuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChlLCAxKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZSk7XG59KCk7XG5cbiF0aGlzLkN1c3RvbUV2ZW50ICYmIGZ1bmN0aW9uKCkge1xuICAgIC8vIEN1c3RvbUV2ZW50IGZvciBicm93c2VycyB3aGljaCBkb24ndCBuYXRpdmVseSBzdXBwb3J0IHRoZSBDb25zdHJ1Y3RvciBtZXRob2RcbiAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbiB0KGUsIG4pIHtcbiAgICAgICAgdmFyIHI7XG4gICAgICAgIG4gPSBuIHx8IHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBkZXRhaWw6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgciA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgICAgICByLmluaXRDdXN0b21FdmVudChlLCBuLmJ1YmJsZXMsIG4uY2FuY2VsYWJsZSwgbi5kZXRhaWwpO1xuICAgICAgICB9IGNhdGNoIChpKSB7XG4gICAgICAgICAgICAvLyBmb3IgYnJvd3NlcnMgd2hpY2ggZG9uJ3Qgc3VwcG9ydCBDdXN0b21FdmVudCBhdCBhbGwsIHdlIHVzZSBhIHJlZ3VsYXIgZXZlbnQgaW5zdGVhZFxuICAgICAgICAgICAgciA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgICAgICAgICByLmluaXRFdmVudChlLCBuLmJ1YmJsZXMsIG4uY2FuY2VsYWJsZSk7XG4gICAgICAgICAgICByLmRldGFpbCA9IG4uZGV0YWlsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG59KCk7IiwiLypcblx0VUkuanNcblxuXHRFeGFtcGxlIG1vZHVsZSB0byBzaG93IGhvdyB0byBpbmNsdWRlIG90aGVyIEpTIGZpbGVzIGludG8geW91IGJyb3dzZXJpZnkgYnVpbGRcbiovXG5cbi8vIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBtb2R1bGUgZ28gaGVyZVxuLy8gZS5nLiB2YXIgJCA9IHJlcXVpcmUoJ3RyYXZlcnN0eScpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRpbml0IDogZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUuZGVidWcoJ0tPLlVJIG1vZHVsZSBpcyBiZWluZyBpbml0aWFsaXNlZCcpO1xuXHR9XG59IiwiLypcdEF1dGhvcjpcblx0XHRUTVcgLSAoQXV0aG9yIE5hbWUgSGVyZSlcbiovXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuLy8gREVGSU5FIEdMT0JBTCBMSUJTICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbi8vIFVuY29tbWVudCB0aGUgbGluZSBiZWxvdyB0byBleHBvc2UgalF1ZXJ5IGFzIGEgZ2xvYmFsIG9iamVjdCB0byB0aGUgdXN1YWwgcGxhY2VzXG4vLyB3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSByZXF1aXJlKCcuL2xpYnMvanF1ZXJ5L2pxdWVyeS0xLjEwLjIuanMnKTtcblxuLy8gZm9yY2UgY29tcGlsYXRpb24gb2YgZ2xvYmFsIGxpYnMgdGhhdCBkb24ndCByZXR1cm4gYSB2YWx1ZS5cbnJlcXVpcmUoXCIuL2hlbHBlcnMvbG9nXCIpO1xucmVxdWlyZShcIi4vaGVscGVycy9zaGltc1wiKTtcblxuLy9pbml0aWFsaXNlIEtPIG9iamVjdFxudmFyIEtPID0ge307XG5cbktPLkNvbmZpZyA9IHtcblx0dmFyaWFibGVYIDogJycsIC8vIHBsZWFzZSBkb24ndCBrZWVwIG1lIC0gb25seSBmb3IgZXhhbXBsZSBzeW50YXghXG5cblx0aW5pdCA6IGZ1bmN0aW9uICgpIHtcblx0XHRjb25zb2xlLmRlYnVnKCdLaWNrb2ZmIGlzIHJ1bm5pbmcnKTtcblxuXHRcdC8vIEV4YW1wbGUgbW9kdWxlIGluY2x1ZGVcblx0XHRLTy5VSSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9VSScpO1xuXHRcdEtPLlVJLmluaXQoKTtcblx0fVxufTtcblxuXG5LTy5Db25maWcuaW5pdCgpOyJdfQ==
